type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    public class Account {

        private long balance;
        private int pin;

        public Account(long balance, int pin) {
            this.balance = balance;
            this.pin = pin;
        }

        public long getBalance() {
            return balance;
        }

        public void setBalance(long balance) {
            this.balance = balance;
        }

        public int getPin() {
            return pin;
        }

        public void setPin(int pin) {
            this.pin = pin;
        }
    }
  learner_created: true
- name: src/banking/BankingSystem.java
  visible: true
  text: |
    package banking;

    import java.util.*;



    public class BankingSystem {

        Scanner scanner = new Scanner(System.in);
        HashMap<Long, Account> accounts = new HashMap<>();
        long currentAccount = 0;

        private void createAccount() {

            final String MESSAGE = "\nYour card has been created\n" +
                    "Your card number:\n" +
                    "%s\n" +
                    "Your card PIN:\n" +
                    "%04d\n\n";

            long maxAccount = 0;
            if (accounts.size() == 0) {
                maxAccount = 4000000000000000L;
            } else {
                for (var elem : accounts.entrySet()) {
                    maxAccount = elem.getKey() > maxAccount ? elem.getKey() : maxAccount;
                }
            }

            long newNumber = Long.parseLong(String.valueOf(maxAccount).substring(6, 15));
            newNumber++;
            String newNumberStr = String.format("400000%09d0", newNumber);

            int pin = new Random().nextInt(10000);
            accounts.put(Long.parseLong(newNumberStr), new Account(0, pin));

            System.out.printf(MESSAGE, newNumberStr, pin);

        }

        private int logIntoAccount() {

            System.out.println("\nEnter your card number:");
            long account = scanner.nextLong();
            System.out.println("Enter your PIN:");
            int pin = scanner.nextInt();

            if (accounts.containsKey(account) && accounts.get(account).getPin() == pin) {
                System.out.println("\nYou have successfully logged in!\n");
                currentAccount = account;

                return loggedMenu();
            } else {
                System.out.println("\nWrong card number or PIN!\n\n");
            }

            return 1;
        }

        private void printBalance() {
            System.out.printf("\nBalance: %d\n\n", accounts.get(currentAccount).getBalance());

        }

        public int loggedMenu() {

            final String LOGGED_MENU = "1. Balance\n" +
                    "2. Log out\n" +
                    "0. Exit";

            System.out.println(LOGGED_MENU);
            int n = scanner.nextInt();
            do {

                switch (n) {
                    case 1:
                        printBalance();
                        break;
                    case 2:
                        currentAccount = 0;
                        System.out.println("\nYou have successfully logged out!\n");
                        return 1;
                    default:
                        break;
                }

                if (n == 0) {
                    return 0;
                } else {
                    System.out.println(LOGGED_MENU);
                    n = scanner.nextInt();
                }

            } while (n != 0);

            return 0;
        }

        public void mainMenu() {

            final String MAIN_MENU = "1. Create an account\n" +
                    "2. Log into account\n" +
                    "0. Exit";

            System.out.println(MAIN_MENU);
            int n = scanner.nextInt();
            do {

                switch (n) {
                    case 1:
                        createAccount();
                        break;
                    case 2:
                        n = logIntoAccount();
                        break;
                    default:
                        break;
                }

                if (n != 0) {
                    System.out.println(MAIN_MENU);
                    n = scanner.nextInt();
                }

            } while (n != 0);

            System.out.println("\nBye!");

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8426#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 03 Aug 2022 07:08:58 UTC
record: 2
